async function addArtworks(t,a){const s=a.transaction("artworks","readwrite");await Promise.all([...Object.keys(t).map((a=>{const e=t[a];return e.image.original.blob&&delete e.image.original.url,e.image.small&&(e.image.small.blob?delete e.image.small.url:delete e.image.small),s.store.put(e)})),s.done])}async function syncArtworks(t){const[a,s]=await Promise.all([t.getAll("playlists"),t.getAll("artworks")]),e=a.reduce(((t,a)=>t.concat(a.tracks)),[]).map((t=>t.artworkId)).reduce(((t,a)=>(t[a]=t[a]?t[a]+1:1,t)),{}),l=t.transaction("artworks","readwrite");await Promise.all([...s.filter((t=>!e[t.id])).map((t=>l.store.delete(t.id))),l.done])}importScripts("./idb-min.js"),async function(){const t=await idb.openDB("veery",1,{upgrade(t){t.createObjectStore("playlists",{keyPath:"id"}),t.createObjectStore("artworks",{keyPath:"id"})}}),[a,s]=await Promise.all([t.getAll("playlists"),t.getAll("artworks")]);postMessage({artworks:s,playlists:a.sort(((t,a)=>t.createdAt-a.createdAt))}),self.onmessage=async function({data:{action:a,artworks:s,playlist:e}}){if("create-playlist"===a)await t.put("playlists",e);else if("delete-playlist"===a)await t.delete("playlists",e.id);else if("add-tracks"===a){const a=await t.get("playlists",e.id);a.tracks=a.tracks.concat(e.tracks),await t.put("playlists",a)}else if("update-tracks"===a){const a=await t.get("playlists",e.id);a.tracks=e.tracks,await t.put("playlists",a)}else if("remove-tracks"===a){const a=await t.get("playlists",e.id);a.tracks=a.tracks.filter((t=>!e.tracks.some((({name:a})=>a===t.name)))),await t.put("playlists",a)}else{const a=await t.get("playlists",e.id);Object.keys(e).forEach((t=>{a[t]=e[t]})),await t.put("playlists",a)}s&&await addArtworks(s,t),syncArtworks(t)}}();